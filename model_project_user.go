/*
Eliona REST API

The Eliona REST API enables unified access to the resources and data of an Eliona environment.

API version: 2.9.1
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProjectUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectUser{}

// ProjectUser A project user
type ProjectUser struct {
	// The unique identifier for the user, represented as an email address.
	UserName string `json:"userName"`
	// The role assigned to the user within the project (e.g., readonly, admin, contributor).
	RoleName string `json:"roleName"`
	// Whether the user for this project is currently active (true) or disabled (false).
	Enabled NullableBool `json:"enabled,omitempty"`
}

type _ProjectUser ProjectUser

// NewProjectUser instantiates a new ProjectUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectUser(userName string, roleName string) *ProjectUser {
	this := ProjectUser{}
	this.UserName = userName
	this.RoleName = roleName
	return &this
}

// NewProjectUserWithDefaults instantiates a new ProjectUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectUserWithDefaults() *ProjectUser {
	this := ProjectUser{}
	return &this
}

// GetUserName returns the UserName field value
func (o *ProjectUser) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *ProjectUser) SetUserName(v string) {
	o.UserName = v
}

// GetRoleName returns the RoleName field value
func (o *ProjectUser) GetRoleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetRoleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleName, true
}

// SetRoleName sets field value
func (o *ProjectUser) SetRoleName(v string) {
	o.RoleName = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectUser) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectUser) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *ProjectUser) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *ProjectUser) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *ProjectUser) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *ProjectUser) UnsetEnabled() {
	o.Enabled.Unset()
}

func (o ProjectUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userName"] = o.UserName
	toSerialize["roleName"] = o.RoleName
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	return toSerialize, nil
}

func (o *ProjectUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
		"roleName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectUser := _ProjectUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectUser)

	if err != nil {
		return err
	}

	*o = ProjectUser(varProjectUser)

	return err
}

type NullableProjectUser struct {
	value *ProjectUser
	isSet bool
}

func (v NullableProjectUser) Get() *ProjectUser {
	return v.value
}

func (v *NullableProjectUser) Set(val *ProjectUser) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectUser) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectUser(val *ProjectUser) *NullableProjectUser {
	return &NullableProjectUser{value: val, isSet: true}
}

func (v NullableProjectUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
