/*
Eliona REST API

The Eliona REST API enables unified access to the resources and data of an Eliona environment.

API version: 2.9.1
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CalculationRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculationRule{}

// CalculationRule Calculation rule to calculate asset attribute data
type CalculationRule struct {
	// The id of the rule
	Id NullableInt32 `json:"id,omitempty"`
	// ID of the corresponding asset
	AssetId int32       `json:"assetId"`
	Subtype DataSubtype `json:"subtype"`
	// Name of the attribute of the asset type to be calculated
	Attribute string `json:"attribute"`
	// Is the calculation attribute virtual or not
	Virtual NullableBool `json:"virtual,omitempty"`
	// calculation rule to calculate the value for the attribute
	Formula NullableString `json:"formula,omitempty"`
	// Physical unit of calculated data
	Unit NullableString `json:"unit,omitempty"`
	// Filter definition for calculation rule
	Filter map[string]interface{} `json:"filter,omitempty"`
}

type _CalculationRule CalculationRule

// NewCalculationRule instantiates a new CalculationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculationRule(assetId int32, subtype DataSubtype, attribute string) *CalculationRule {
	this := CalculationRule{}
	this.AssetId = assetId
	this.Subtype = subtype
	this.Attribute = attribute
	return &this
}

// NewCalculationRuleWithDefaults instantiates a new CalculationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculationRuleWithDefaults() *CalculationRule {
	this := CalculationRule{}
	var subtype DataSubtype = SUBTYPE_INPUT
	this.Subtype = subtype
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CalculationRule) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CalculationRule) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CalculationRule) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *CalculationRule) SetId(v int32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *CalculationRule) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CalculationRule) UnsetId() {
	o.Id.Unset()
}

// GetAssetId returns the AssetId field value
func (o *CalculationRule) GetAssetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *CalculationRule) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *CalculationRule) SetAssetId(v int32) {
	o.AssetId = v
}

// GetSubtype returns the Subtype field value
func (o *CalculationRule) GetSubtype() DataSubtype {
	if o == nil {
		var ret DataSubtype
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *CalculationRule) GetSubtypeOk() (*DataSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *CalculationRule) SetSubtype(v DataSubtype) {
	o.Subtype = v
}

// GetAttribute returns the Attribute field value
func (o *CalculationRule) GetAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *CalculationRule) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *CalculationRule) SetAttribute(v string) {
	o.Attribute = v
}

// GetVirtual returns the Virtual field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CalculationRule) GetVirtual() bool {
	if o == nil || IsNil(o.Virtual.Get()) {
		var ret bool
		return ret
	}
	return *o.Virtual.Get()
}

// GetVirtualOk returns a tuple with the Virtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CalculationRule) GetVirtualOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Virtual.Get(), o.Virtual.IsSet()
}

// HasVirtual returns a boolean if a field has been set.
func (o *CalculationRule) HasVirtual() bool {
	if o != nil && o.Virtual.IsSet() {
		return true
	}

	return false
}

// SetVirtual gets a reference to the given NullableBool and assigns it to the Virtual field.
func (o *CalculationRule) SetVirtual(v bool) {
	o.Virtual.Set(&v)
}

// SetVirtualNil sets the value for Virtual to be an explicit nil
func (o *CalculationRule) SetVirtualNil() {
	o.Virtual.Set(nil)
}

// UnsetVirtual ensures that no value is present for Virtual, not even an explicit nil
func (o *CalculationRule) UnsetVirtual() {
	o.Virtual.Unset()
}

// GetFormula returns the Formula field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CalculationRule) GetFormula() string {
	if o == nil || IsNil(o.Formula.Get()) {
		var ret string
		return ret
	}
	return *o.Formula.Get()
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CalculationRule) GetFormulaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Formula.Get(), o.Formula.IsSet()
}

// HasFormula returns a boolean if a field has been set.
func (o *CalculationRule) HasFormula() bool {
	if o != nil && o.Formula.IsSet() {
		return true
	}

	return false
}

// SetFormula gets a reference to the given NullableString and assigns it to the Formula field.
func (o *CalculationRule) SetFormula(v string) {
	o.Formula.Set(&v)
}

// SetFormulaNil sets the value for Formula to be an explicit nil
func (o *CalculationRule) SetFormulaNil() {
	o.Formula.Set(nil)
}

// UnsetFormula ensures that no value is present for Formula, not even an explicit nil
func (o *CalculationRule) UnsetFormula() {
	o.Formula.Unset()
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CalculationRule) GetUnit() string {
	if o == nil || IsNil(o.Unit.Get()) {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CalculationRule) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *CalculationRule) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given NullableString and assigns it to the Unit field.
func (o *CalculationRule) SetUnit(v string) {
	o.Unit.Set(&v)
}

// SetUnitNil sets the value for Unit to be an explicit nil
func (o *CalculationRule) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *CalculationRule) UnsetUnit() {
	o.Unit.Unset()
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CalculationRule) GetFilter() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CalculationRule) GetFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filter) {
		return map[string]interface{}{}, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *CalculationRule) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given map[string]interface{} and assigns it to the Filter field.
func (o *CalculationRule) SetFilter(v map[string]interface{}) {
	o.Filter = v
}

func (o CalculationRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["assetId"] = o.AssetId
	toSerialize["subtype"] = o.Subtype
	toSerialize["attribute"] = o.Attribute
	if o.Virtual.IsSet() {
		toSerialize["virtual"] = o.Virtual.Get()
	}
	if o.Formula.IsSet() {
		toSerialize["formula"] = o.Formula.Get()
	}
	if o.Unit.IsSet() {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

func (o *CalculationRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetId",
		"subtype",
		"attribute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCalculationRule := _CalculationRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCalculationRule)

	if err != nil {
		return err
	}

	*o = CalculationRule(varCalculationRule)

	return err
}

type NullableCalculationRule struct {
	value *CalculationRule
	isSet bool
}

func (v NullableCalculationRule) Get() *CalculationRule {
	return v.value
}

func (v *NullableCalculationRule) Set(val *CalculationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculationRule(val *CalculationRule) *NullableCalculationRule {
	return &NullableCalculationRule{value: val, isSet: true}
}

func (v NullableCalculationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
