/*
Eliona REST API

The Eliona REST API enables unified access to the resources and data of an Eliona environment.

API version: 2.9.1
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AttributeDisplay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeDisplay{}

// AttributeDisplay How attributes are displayed for specific assets
type AttributeDisplay struct {
	// ID of the corresponding asset
	AssetId int32       `json:"assetId"`
	Subtype DataSubtype `json:"subtype"`
	// Name of the attribute of the asset type
	Attribute string `json:"attribute"`
	// Physical unit of numeric data
	Unit NullableString `json:"unit,omitempty"`
	// Number of decimal places
	Precision NullableInt64 `json:"precision,omitempty"`
	// Lower limit
	Min NullableFloat64 `json:"min,omitempty"`
	// Upper limit
	Max NullableFloat64 `json:"max,omitempty"`
	// Should the attribute be displayed in viewer
	Viewer NullableBool `json:"viewer,omitempty"`
	// Should the attribute be displayed in AR
	Ar NullableBool `json:"ar,omitempty"`
	// Sequence in AR display
	Sequence NullableInt64 `json:"sequence,omitempty"`
	// list of mapping between value and custom text
	Map []map[string]interface{} `json:"map,omitempty"`
}

type _AttributeDisplay AttributeDisplay

// NewAttributeDisplay instantiates a new AttributeDisplay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeDisplay(assetId int32, subtype DataSubtype, attribute string) *AttributeDisplay {
	this := AttributeDisplay{}
	this.AssetId = assetId
	this.Subtype = subtype
	this.Attribute = attribute
	var viewer bool = false
	this.Viewer = *NewNullableBool(&viewer)
	var ar bool = false
	this.Ar = *NewNullableBool(&ar)
	return &this
}

// NewAttributeDisplayWithDefaults instantiates a new AttributeDisplay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeDisplayWithDefaults() *AttributeDisplay {
	this := AttributeDisplay{}
	var subtype DataSubtype = SUBTYPE_INPUT
	this.Subtype = subtype
	var viewer bool = false
	this.Viewer = *NewNullableBool(&viewer)
	var ar bool = false
	this.Ar = *NewNullableBool(&ar)
	return &this
}

// GetAssetId returns the AssetId field value
func (o *AttributeDisplay) GetAssetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AttributeDisplay) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AttributeDisplay) SetAssetId(v int32) {
	o.AssetId = v
}

// GetSubtype returns the Subtype field value
func (o *AttributeDisplay) GetSubtype() DataSubtype {
	if o == nil {
		var ret DataSubtype
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *AttributeDisplay) GetSubtypeOk() (*DataSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *AttributeDisplay) SetSubtype(v DataSubtype) {
	o.Subtype = v
}

// GetAttribute returns the Attribute field value
func (o *AttributeDisplay) GetAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *AttributeDisplay) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *AttributeDisplay) SetAttribute(v string) {
	o.Attribute = v
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetUnit() string {
	if o == nil || IsNil(o.Unit.Get()) {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *AttributeDisplay) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given NullableString and assigns it to the Unit field.
func (o *AttributeDisplay) SetUnit(v string) {
	o.Unit.Set(&v)
}

// SetUnitNil sets the value for Unit to be an explicit nil
func (o *AttributeDisplay) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *AttributeDisplay) UnsetUnit() {
	o.Unit.Unset()
}

// GetPrecision returns the Precision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetPrecision() int64 {
	if o == nil || IsNil(o.Precision.Get()) {
		var ret int64
		return ret
	}
	return *o.Precision.Get()
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetPrecisionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Precision.Get(), o.Precision.IsSet()
}

// HasPrecision returns a boolean if a field has been set.
func (o *AttributeDisplay) HasPrecision() bool {
	if o != nil && o.Precision.IsSet() {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given NullableInt64 and assigns it to the Precision field.
func (o *AttributeDisplay) SetPrecision(v int64) {
	o.Precision.Set(&v)
}

// SetPrecisionNil sets the value for Precision to be an explicit nil
func (o *AttributeDisplay) SetPrecisionNil() {
	o.Precision.Set(nil)
}

// UnsetPrecision ensures that no value is present for Precision, not even an explicit nil
func (o *AttributeDisplay) UnsetPrecision() {
	o.Precision.Unset()
}

// GetMin returns the Min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetMin() float64 {
	if o == nil || IsNil(o.Min.Get()) {
		var ret float64
		return ret
	}
	return *o.Min.Get()
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Min.Get(), o.Min.IsSet()
}

// HasMin returns a boolean if a field has been set.
func (o *AttributeDisplay) HasMin() bool {
	if o != nil && o.Min.IsSet() {
		return true
	}

	return false
}

// SetMin gets a reference to the given NullableFloat64 and assigns it to the Min field.
func (o *AttributeDisplay) SetMin(v float64) {
	o.Min.Set(&v)
}

// SetMinNil sets the value for Min to be an explicit nil
func (o *AttributeDisplay) SetMinNil() {
	o.Min.Set(nil)
}

// UnsetMin ensures that no value is present for Min, not even an explicit nil
func (o *AttributeDisplay) UnsetMin() {
	o.Min.Unset()
}

// GetMax returns the Max field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetMax() float64 {
	if o == nil || IsNil(o.Max.Get()) {
		var ret float64
		return ret
	}
	return *o.Max.Get()
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Max.Get(), o.Max.IsSet()
}

// HasMax returns a boolean if a field has been set.
func (o *AttributeDisplay) HasMax() bool {
	if o != nil && o.Max.IsSet() {
		return true
	}

	return false
}

// SetMax gets a reference to the given NullableFloat64 and assigns it to the Max field.
func (o *AttributeDisplay) SetMax(v float64) {
	o.Max.Set(&v)
}

// SetMaxNil sets the value for Max to be an explicit nil
func (o *AttributeDisplay) SetMaxNil() {
	o.Max.Set(nil)
}

// UnsetMax ensures that no value is present for Max, not even an explicit nil
func (o *AttributeDisplay) UnsetMax() {
	o.Max.Unset()
}

// GetViewer returns the Viewer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetViewer() bool {
	if o == nil || IsNil(o.Viewer.Get()) {
		var ret bool
		return ret
	}
	return *o.Viewer.Get()
}

// GetViewerOk returns a tuple with the Viewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetViewerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Viewer.Get(), o.Viewer.IsSet()
}

// HasViewer returns a boolean if a field has been set.
func (o *AttributeDisplay) HasViewer() bool {
	if o != nil && o.Viewer.IsSet() {
		return true
	}

	return false
}

// SetViewer gets a reference to the given NullableBool and assigns it to the Viewer field.
func (o *AttributeDisplay) SetViewer(v bool) {
	o.Viewer.Set(&v)
}

// SetViewerNil sets the value for Viewer to be an explicit nil
func (o *AttributeDisplay) SetViewerNil() {
	o.Viewer.Set(nil)
}

// UnsetViewer ensures that no value is present for Viewer, not even an explicit nil
func (o *AttributeDisplay) UnsetViewer() {
	o.Viewer.Unset()
}

// GetAr returns the Ar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetAr() bool {
	if o == nil || IsNil(o.Ar.Get()) {
		var ret bool
		return ret
	}
	return *o.Ar.Get()
}

// GetArOk returns a tuple with the Ar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetArOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ar.Get(), o.Ar.IsSet()
}

// HasAr returns a boolean if a field has been set.
func (o *AttributeDisplay) HasAr() bool {
	if o != nil && o.Ar.IsSet() {
		return true
	}

	return false
}

// SetAr gets a reference to the given NullableBool and assigns it to the Ar field.
func (o *AttributeDisplay) SetAr(v bool) {
	o.Ar.Set(&v)
}

// SetArNil sets the value for Ar to be an explicit nil
func (o *AttributeDisplay) SetArNil() {
	o.Ar.Set(nil)
}

// UnsetAr ensures that no value is present for Ar, not even an explicit nil
func (o *AttributeDisplay) UnsetAr() {
	o.Ar.Unset()
}

// GetSequence returns the Sequence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetSequence() int64 {
	if o == nil || IsNil(o.Sequence.Get()) {
		var ret int64
		return ret
	}
	return *o.Sequence.Get()
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetSequenceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sequence.Get(), o.Sequence.IsSet()
}

// HasSequence returns a boolean if a field has been set.
func (o *AttributeDisplay) HasSequence() bool {
	if o != nil && o.Sequence.IsSet() {
		return true
	}

	return false
}

// SetSequence gets a reference to the given NullableInt64 and assigns it to the Sequence field.
func (o *AttributeDisplay) SetSequence(v int64) {
	o.Sequence.Set(&v)
}

// SetSequenceNil sets the value for Sequence to be an explicit nil
func (o *AttributeDisplay) SetSequenceNil() {
	o.Sequence.Set(nil)
}

// UnsetSequence ensures that no value is present for Sequence, not even an explicit nil
func (o *AttributeDisplay) UnsetSequence() {
	o.Sequence.Unset()
}

// GetMap returns the Map field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeDisplay) GetMap() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeDisplay) GetMapOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Map) {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *AttributeDisplay) HasMap() bool {
	if o != nil && !IsNil(o.Map) {
		return true
	}

	return false
}

// SetMap gets a reference to the given []map[string]interface{} and assigns it to the Map field.
func (o *AttributeDisplay) SetMap(v []map[string]interface{}) {
	o.Map = v
}

func (o AttributeDisplay) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeDisplay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assetId"] = o.AssetId
	toSerialize["subtype"] = o.Subtype
	toSerialize["attribute"] = o.Attribute
	if o.Unit.IsSet() {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.Precision.IsSet() {
		toSerialize["precision"] = o.Precision.Get()
	}
	if o.Min.IsSet() {
		toSerialize["min"] = o.Min.Get()
	}
	if o.Max.IsSet() {
		toSerialize["max"] = o.Max.Get()
	}
	if o.Viewer.IsSet() {
		toSerialize["viewer"] = o.Viewer.Get()
	}
	if o.Ar.IsSet() {
		toSerialize["ar"] = o.Ar.Get()
	}
	if o.Sequence.IsSet() {
		toSerialize["sequence"] = o.Sequence.Get()
	}
	if o.Map != nil {
		toSerialize["map"] = o.Map
	}
	return toSerialize, nil
}

func (o *AttributeDisplay) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetId",
		"subtype",
		"attribute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttributeDisplay := _AttributeDisplay{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttributeDisplay)

	if err != nil {
		return err
	}

	*o = AttributeDisplay(varAttributeDisplay)

	return err
}

type NullableAttributeDisplay struct {
	value *AttributeDisplay
	isSet bool
}

func (v NullableAttributeDisplay) Get() *AttributeDisplay {
	return v.value
}

func (v *NullableAttributeDisplay) Set(val *AttributeDisplay) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeDisplay) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeDisplay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeDisplay(val *AttributeDisplay) *NullableAttributeDisplay {
	return &NullableAttributeDisplay{value: val, isSet: true}
}

func (v NullableAttributeDisplay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeDisplay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
