/*
Eliona REST API

The Eliona REST PI enables unified access to the resources and data of an Eliona environment.

API version: 2.9.1
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AgentsAPIService AgentsAPI service
type AgentsAPIService service

type ApiGetAgentByClassAndIdRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentId    int32
	agentClass string
}

func (r ApiGetAgentByClassAndIdRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.GetAgentByClassAndIdExecute(r)
}

/*
GetAgentByClassAndId Information about an agent

Gets information about an agent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentId The id of the agent
	@param agentClass The class of an agent
	@return ApiGetAgentByClassAndIdRequest
*/
func (a *AgentsAPIService) GetAgentByClassAndId(ctx context.Context, agentId int32, agentClass string) ApiGetAgentByClassAndIdRequest {
	return ApiGetAgentByClassAndIdRequest{
		ApiService: a,
		ctx:        ctx,
		agentId:    agentId,
		agentClass: agentClass,
	}
}

// Execute executes the request
//
//	@return Agent
func (a *AgentsAPIService) GetAgentByClassAndIdExecute(r ApiGetAgentByClassAndIdRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgentByClassAndId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}/{agent-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentDeviceByIdRequest struct {
	ctx           context.Context
	ApiService    *AgentsAPIService
	agentClass    string
	agentDeviceId int32
}

func (r ApiGetAgentDeviceByIdRequest) Execute() ([]IosysAgentDevice, *http.Response, error) {
	return r.ApiService.GetAgentDeviceByIdExecute(r)
}

/*
GetAgentDeviceById Information about agent device

Gets information about agent device.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceId The id of the device
	@return ApiGetAgentDeviceByIdRequest
*/
func (a *AgentsAPIService) GetAgentDeviceById(ctx context.Context, agentClass string, agentDeviceId int32) ApiGetAgentDeviceByIdRequest {
	return ApiGetAgentDeviceByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		agentClass:    agentClass,
		agentDeviceId: agentDeviceId,
	}
}

// Execute executes the request
//
//	@return []IosysAgentDevice
func (a *AgentsAPIService) GetAgentDeviceByIdExecute(r ApiGetAgentDeviceByIdRequest) ([]IosysAgentDevice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []IosysAgentDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgentDeviceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-devices/{agent-class}/{agent-device-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceId, "agentDeviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentDeviceMappingByIdRequest struct {
	ctx                  context.Context
	ApiService           *AgentsAPIService
	agentClass           string
	agentDeviceMappingId int32
}

func (r ApiGetAgentDeviceMappingByIdRequest) Execute() ([]IosysAgentDeviceMapping, *http.Response, error) {
	return r.ApiService.GetAgentDeviceMappingByIdExecute(r)
}

/*
GetAgentDeviceMappingById Information about agent device mapping

Gets information about agent device mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceMappingId The id of the device mapping
	@return ApiGetAgentDeviceMappingByIdRequest
*/
func (a *AgentsAPIService) GetAgentDeviceMappingById(ctx context.Context, agentClass string, agentDeviceMappingId int32) ApiGetAgentDeviceMappingByIdRequest {
	return ApiGetAgentDeviceMappingByIdRequest{
		ApiService:           a,
		ctx:                  ctx,
		agentClass:           agentClass,
		agentDeviceMappingId: agentDeviceMappingId,
	}
}

// Execute executes the request
//
//	@return []IosysAgentDeviceMapping
func (a *AgentsAPIService) GetAgentDeviceMappingByIdExecute(r ApiGetAgentDeviceMappingByIdRequest) ([]IosysAgentDeviceMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []IosysAgentDeviceMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgentDeviceMappingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-device-mappings/{agent-class}/{agent-device-mapping-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-mapping-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceMappingId, "agentDeviceMappingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentDeviceMappingsByDeviceIdRequest struct {
	ctx           context.Context
	ApiService    *AgentsAPIService
	agentClass    string
	agentDeviceId int32
}

func (r ApiGetAgentDeviceMappingsByDeviceIdRequest) Execute() ([]IosysAgentDeviceMapping, *http.Response, error) {
	return r.ApiService.GetAgentDeviceMappingsByDeviceIdExecute(r)
}

/*
GetAgentDeviceMappingsByDeviceId Information about agent device mappings

Gets information about mappings between agent and eliona.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceId The id of the device
	@return ApiGetAgentDeviceMappingsByDeviceIdRequest
*/
func (a *AgentsAPIService) GetAgentDeviceMappingsByDeviceId(ctx context.Context, agentClass string, agentDeviceId int32) ApiGetAgentDeviceMappingsByDeviceIdRequest {
	return ApiGetAgentDeviceMappingsByDeviceIdRequest{
		ApiService:    a,
		ctx:           ctx,
		agentClass:    agentClass,
		agentDeviceId: agentDeviceId,
	}
}

// Execute executes the request
//
//	@return []IosysAgentDeviceMapping
func (a *AgentsAPIService) GetAgentDeviceMappingsByDeviceIdExecute(r ApiGetAgentDeviceMappingsByDeviceIdRequest) ([]IosysAgentDeviceMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []IosysAgentDeviceMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgentDeviceMappingsByDeviceId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-devices/{agent-class}/{agent-device-id}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceId, "agentDeviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentDevicesByAgentIdRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentClass string
	agentId    int32
}

func (r ApiGetAgentDevicesByAgentIdRequest) Execute() ([]IosysAgentDevice, *http.Response, error) {
	return r.ApiService.GetAgentDevicesByAgentIdExecute(r)
}

/*
GetAgentDevicesByAgentId Information about agent devices

Gets information about agent devices.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentId The id of the agent
	@return ApiGetAgentDevicesByAgentIdRequest
*/
func (a *AgentsAPIService) GetAgentDevicesByAgentId(ctx context.Context, agentClass string, agentId int32) ApiGetAgentDevicesByAgentIdRequest {
	return ApiGetAgentDevicesByAgentIdRequest{
		ApiService: a,
		ctx:        ctx,
		agentClass: agentClass,
		agentId:    agentId,
	}
}

// Execute executes the request
//
//	@return []IosysAgentDevice
func (a *AgentsAPIService) GetAgentDevicesByAgentIdExecute(r ApiGetAgentDevicesByAgentIdRequest) ([]IosysAgentDevice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []IosysAgentDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgentDevicesByAgentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}/{agent-id}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentsRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
}

func (r ApiGetAgentsRequest) Execute() ([]Agent, *http.Response, error) {
	return r.ApiService.GetAgentsExecute(r)
}

/*
GetAgents Information about agents

Gets information about agents.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAgentsRequest
*/
func (a *AgentsAPIService) GetAgents(ctx context.Context) ApiGetAgentsRequest {
	return ApiGetAgentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Agent
func (a *AgentsAPIService) GetAgentsExecute(r ApiGetAgentsRequest) ([]Agent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentsByClassRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentClass string
}

func (r ApiGetAgentsByClassRequest) Execute() ([]Agent, *http.Response, error) {
	return r.ApiService.GetAgentsByClassExecute(r)
}

/*
GetAgentsByClass Information about agents for a specific class

Gets information about agents.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@return ApiGetAgentsByClassRequest
*/
func (a *AgentsAPIService) GetAgentsByClass(ctx context.Context, agentClass string) ApiGetAgentsByClassRequest {
	return ApiGetAgentsByClassRequest{
		ApiService: a,
		ctx:        ctx,
		agentClass: agentClass,
	}
}

// Execute executes the request
//
//	@return []Agent
func (a *AgentsAPIService) GetAgentsByClassExecute(r ApiGetAgentsByClassRequest) ([]Agent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.GetAgentsByClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAgentByClassRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentClass string
	agent      *Agent
}

func (r ApiPostAgentByClassRequest) Agent(agent Agent) ApiPostAgentByClassRequest {
	r.agent = &agent
	return r
}

func (r ApiPostAgentByClassRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.PostAgentByClassExecute(r)
}

/*
PostAgentByClass Create an agent

Create a new agent for a specific class

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@return ApiPostAgentByClassRequest
*/
func (a *AgentsAPIService) PostAgentByClass(ctx context.Context, agentClass string) ApiPostAgentByClassRequest {
	return ApiPostAgentByClassRequest{
		ApiService: a,
		ctx:        ctx,
		agentClass: agentClass,
	}
}

// Execute executes the request
//
//	@return Agent
func (a *AgentsAPIService) PostAgentByClassExecute(r ApiPostAgentByClassRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PostAgentByClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agent == nil {
		return localVarReturnValue, nil, reportError("agent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAgentDeviceByAgentIdRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentClass string
	agentId    int32
	body       *IosysAgentDevice
}

func (r ApiPostAgentDeviceByAgentIdRequest) Body(body IosysAgentDevice) ApiPostAgentDeviceByAgentIdRequest {
	r.body = &body
	return r
}

func (r ApiPostAgentDeviceByAgentIdRequest) Execute() (*IosysAgentDevice, *http.Response, error) {
	return r.ApiService.PostAgentDeviceByAgentIdExecute(r)
}

/*
PostAgentDeviceByAgentId Create an agent device

Create a new agent device.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentId The id of the agent
	@return ApiPostAgentDeviceByAgentIdRequest
*/
func (a *AgentsAPIService) PostAgentDeviceByAgentId(ctx context.Context, agentClass string, agentId int32) ApiPostAgentDeviceByAgentIdRequest {
	return ApiPostAgentDeviceByAgentIdRequest{
		ApiService: a,
		ctx:        ctx,
		agentClass: agentClass,
		agentId:    agentId,
	}
}

// Execute executes the request
//
//	@return IosysAgentDevice
func (a *AgentsAPIService) PostAgentDeviceByAgentIdExecute(r ApiPostAgentDeviceByAgentIdRequest) (*IosysAgentDevice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IosysAgentDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PostAgentDeviceByAgentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}/{agent-id}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAgentDeviceMappingByDeviceIdRequest struct {
	ctx           context.Context
	ApiService    *AgentsAPIService
	agentClass    string
	agentDeviceId int32
	body          *IosysAgentDeviceMapping
}

func (r ApiPostAgentDeviceMappingByDeviceIdRequest) Body(body IosysAgentDeviceMapping) ApiPostAgentDeviceMappingByDeviceIdRequest {
	r.body = &body
	return r
}

func (r ApiPostAgentDeviceMappingByDeviceIdRequest) Execute() (*IosysAgentDeviceMapping, *http.Response, error) {
	return r.ApiService.PostAgentDeviceMappingByDeviceIdExecute(r)
}

/*
PostAgentDeviceMappingByDeviceId Create an agent device mapping

Create a new agent device mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceId The id of the device
	@return ApiPostAgentDeviceMappingByDeviceIdRequest
*/
func (a *AgentsAPIService) PostAgentDeviceMappingByDeviceId(ctx context.Context, agentClass string, agentDeviceId int32) ApiPostAgentDeviceMappingByDeviceIdRequest {
	return ApiPostAgentDeviceMappingByDeviceIdRequest{
		ApiService:    a,
		ctx:           ctx,
		agentClass:    agentClass,
		agentDeviceId: agentDeviceId,
	}
}

// Execute executes the request
//
//	@return IosysAgentDeviceMapping
func (a *AgentsAPIService) PostAgentDeviceMappingByDeviceIdExecute(r ApiPostAgentDeviceMappingByDeviceIdRequest) (*IosysAgentDeviceMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IosysAgentDeviceMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PostAgentDeviceMappingByDeviceId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-devices/{agent-class}/{agent-device-id}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceId, "agentDeviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAgentByClassRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentClass string
	agent      *Agent
}

func (r ApiPutAgentByClassRequest) Agent(agent Agent) ApiPutAgentByClassRequest {
	r.agent = &agent
	return r
}

func (r ApiPutAgentByClassRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.PutAgentByClassExecute(r)
}

/*
PutAgentByClass Create or update an agent

Deprecated - use POST /agents/{agent-class} for creating and PUT /agents/{agent-class}/{agent-id} for updating

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@return ApiPutAgentByClassRequest

Deprecated
*/
func (a *AgentsAPIService) PutAgentByClass(ctx context.Context, agentClass string) ApiPutAgentByClassRequest {
	return ApiPutAgentByClassRequest{
		ApiService: a,
		ctx:        ctx,
		agentClass: agentClass,
	}
}

// Execute executes the request
//
//	@return Agent
//
// Deprecated
func (a *AgentsAPIService) PutAgentByClassExecute(r ApiPutAgentByClassRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PutAgentByClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agent == nil {
		return localVarReturnValue, nil, reportError("agent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAgentByClassAndIdRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentId    int32
	agentClass string
	agent      *Agent
}

func (r ApiPutAgentByClassAndIdRequest) Agent(agent Agent) ApiPutAgentByClassAndIdRequest {
	r.agent = &agent
	return r
}

func (r ApiPutAgentByClassAndIdRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.PutAgentByClassAndIdExecute(r)
}

/*
PutAgentByClassAndId Update an agent

Update an agent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentId The id of the agent
	@param agentClass The class of an agent
	@return ApiPutAgentByClassAndIdRequest
*/
func (a *AgentsAPIService) PutAgentByClassAndId(ctx context.Context, agentId int32, agentClass string) ApiPutAgentByClassAndIdRequest {
	return ApiPutAgentByClassAndIdRequest{
		ApiService: a,
		ctx:        ctx,
		agentId:    agentId,
		agentClass: agentClass,
	}
}

// Execute executes the request
//
//	@return Agent
func (a *AgentsAPIService) PutAgentByClassAndIdExecute(r ApiPutAgentByClassAndIdRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PutAgentByClassAndId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}/{agent-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agent == nil {
		return localVarReturnValue, nil, reportError("agent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAgentDeviceByAgentIdRequest struct {
	ctx        context.Context
	ApiService *AgentsAPIService
	agentClass string
	agentId    int32
	body       *IosysAgentDevice
}

func (r ApiPutAgentDeviceByAgentIdRequest) Body(body IosysAgentDevice) ApiPutAgentDeviceByAgentIdRequest {
	r.body = &body
	return r
}

func (r ApiPutAgentDeviceByAgentIdRequest) Execute() (*IosysAgentDevice, *http.Response, error) {
	return r.ApiService.PutAgentDeviceByAgentIdExecute(r)
}

/*
PutAgentDeviceByAgentId Create or update an agent device

Deprecated - use POST /agents/{agent-class}/{agent-id}/devices for creating and PUT /agent-devices/{agent-class}/{agent-device-id} for updating

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentId The id of the agent
	@return ApiPutAgentDeviceByAgentIdRequest

Deprecated
*/
func (a *AgentsAPIService) PutAgentDeviceByAgentId(ctx context.Context, agentClass string, agentId int32) ApiPutAgentDeviceByAgentIdRequest {
	return ApiPutAgentDeviceByAgentIdRequest{
		ApiService: a,
		ctx:        ctx,
		agentClass: agentClass,
		agentId:    agentId,
	}
}

// Execute executes the request
//
//	@return IosysAgentDevice
//
// Deprecated
func (a *AgentsAPIService) PutAgentDeviceByAgentIdExecute(r ApiPutAgentDeviceByAgentIdRequest) (*IosysAgentDevice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IosysAgentDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PutAgentDeviceByAgentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agents/{agent-class}/{agent-id}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAgentDeviceByIdRequest struct {
	ctx           context.Context
	ApiService    *AgentsAPIService
	agentClass    string
	agentDeviceId int32
	body          *IosysAgentDevice
}

func (r ApiPutAgentDeviceByIdRequest) Body(body IosysAgentDevice) ApiPutAgentDeviceByIdRequest {
	r.body = &body
	return r
}

func (r ApiPutAgentDeviceByIdRequest) Execute() (*IosysAgentDevice, *http.Response, error) {
	return r.ApiService.PutAgentDeviceByIdExecute(r)
}

/*
PutAgentDeviceById Update an agent device

Update a new agent device.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceId The id of the device
	@return ApiPutAgentDeviceByIdRequest
*/
func (a *AgentsAPIService) PutAgentDeviceById(ctx context.Context, agentClass string, agentDeviceId int32) ApiPutAgentDeviceByIdRequest {
	return ApiPutAgentDeviceByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		agentClass:    agentClass,
		agentDeviceId: agentDeviceId,
	}
}

// Execute executes the request
//
//	@return IosysAgentDevice
func (a *AgentsAPIService) PutAgentDeviceByIdExecute(r ApiPutAgentDeviceByIdRequest) (*IosysAgentDevice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IosysAgentDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PutAgentDeviceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-devices/{agent-class}/{agent-device-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceId, "agentDeviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAgentDeviceMappingByDeviceIdRequest struct {
	ctx           context.Context
	ApiService    *AgentsAPIService
	agentClass    string
	agentDeviceId int32
	body          *IosysAgentDeviceMapping
}

func (r ApiPutAgentDeviceMappingByDeviceIdRequest) Body(body IosysAgentDeviceMapping) ApiPutAgentDeviceMappingByDeviceIdRequest {
	r.body = &body
	return r
}

func (r ApiPutAgentDeviceMappingByDeviceIdRequest) Execute() (*IosysAgentDeviceMapping, *http.Response, error) {
	return r.ApiService.PutAgentDeviceMappingByDeviceIdExecute(r)
}

/*
PutAgentDeviceMappingByDeviceId Create or update an agent device mapping

Deprecated - Use POST /agent-devices/{agent-class}/{agent-device-id}/mappings for creating and /agent-device-mappings/{agent-class}/{agent-device-mapping-id} for updating

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceId The id of the device
	@return ApiPutAgentDeviceMappingByDeviceIdRequest

Deprecated
*/
func (a *AgentsAPIService) PutAgentDeviceMappingByDeviceId(ctx context.Context, agentClass string, agentDeviceId int32) ApiPutAgentDeviceMappingByDeviceIdRequest {
	return ApiPutAgentDeviceMappingByDeviceIdRequest{
		ApiService:    a,
		ctx:           ctx,
		agentClass:    agentClass,
		agentDeviceId: agentDeviceId,
	}
}

// Execute executes the request
//
//	@return IosysAgentDeviceMapping
//
// Deprecated
func (a *AgentsAPIService) PutAgentDeviceMappingByDeviceIdExecute(r ApiPutAgentDeviceMappingByDeviceIdRequest) (*IosysAgentDeviceMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IosysAgentDeviceMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PutAgentDeviceMappingByDeviceId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-devices/{agent-class}/{agent-device-id}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceId, "agentDeviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAgentDeviceMappingByIdRequest struct {
	ctx                  context.Context
	ApiService           *AgentsAPIService
	agentClass           string
	agentDeviceMappingId int32
	body                 *IosysAgentDeviceMapping
}

func (r ApiPutAgentDeviceMappingByIdRequest) Body(body IosysAgentDeviceMapping) ApiPutAgentDeviceMappingByIdRequest {
	r.body = &body
	return r
}

func (r ApiPutAgentDeviceMappingByIdRequest) Execute() (*IosysAgentDeviceMapping, *http.Response, error) {
	return r.ApiService.PutAgentDeviceMappingByIdExecute(r)
}

/*
PutAgentDeviceMappingById Update an agent device mapping

Update a new agent device mapping.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentClass The class of an agent
	@param agentDeviceMappingId The id of the device mapping
	@return ApiPutAgentDeviceMappingByIdRequest
*/
func (a *AgentsAPIService) PutAgentDeviceMappingById(ctx context.Context, agentClass string, agentDeviceMappingId int32) ApiPutAgentDeviceMappingByIdRequest {
	return ApiPutAgentDeviceMappingByIdRequest{
		ApiService:           a,
		ctx:                  ctx,
		agentClass:           agentClass,
		agentDeviceMappingId: agentDeviceMappingId,
	}
}

// Execute executes the request
//
//	@return IosysAgentDeviceMapping
func (a *AgentsAPIService) PutAgentDeviceMappingByIdExecute(r ApiPutAgentDeviceMappingByIdRequest) (*IosysAgentDeviceMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IosysAgentDeviceMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentsAPIService.PutAgentDeviceMappingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agent-device-mappings/{agent-class}/{agent-device-mapping-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent-class"+"}", url.PathEscape(parameterValueToString(r.agentClass, "agentClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agent-device-mapping-id"+"}", url.PathEscape(parameterValueToString(r.agentDeviceMappingId, "agentDeviceMappingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
