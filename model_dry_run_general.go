/*
Eliona REST API

The Eliona REST API enables unified access to the resources and data of an Eliona environment.

API version: 2.9.1
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DryRunGeneral type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DryRunGeneral{}

// DryRunGeneral Information about dry run the operation
type DryRunGeneral struct {
	// Unique identifier (textual or numeric) of resources
	Identifier *string `json:"identifier,omitempty"`
	// The status code expecting when actually perform the operation. Some values are - 200: updated (ok)  - 201: created - 204: deleted (no content) - 304: unchanged (not modified) - 400: problem (bad request) - 404: not found - 409: duplicated (conflict) - 422: unprocessable
	StatusCode *int32 `json:"statusCode,omitempty"`
	// The error message expecting when actually perform the operation.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
}

// NewDryRunGeneral instantiates a new DryRunGeneral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDryRunGeneral() *DryRunGeneral {
	this := DryRunGeneral{}
	return &this
}

// NewDryRunGeneralWithDefaults instantiates a new DryRunGeneral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDryRunGeneralWithDefaults() *DryRunGeneral {
	this := DryRunGeneral{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *DryRunGeneral) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DryRunGeneral) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *DryRunGeneral) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *DryRunGeneral) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *DryRunGeneral) GetStatusCode() int32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DryRunGeneral) GetStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *DryRunGeneral) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *DryRunGeneral) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DryRunGeneral) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DryRunGeneral) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *DryRunGeneral) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *DryRunGeneral) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}

// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *DryRunGeneral) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *DryRunGeneral) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

func (o DryRunGeneral) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DryRunGeneral) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	return toSerialize, nil
}

type NullableDryRunGeneral struct {
	value *DryRunGeneral
	isSet bool
}

func (v NullableDryRunGeneral) Get() *DryRunGeneral {
	return v.value
}

func (v *NullableDryRunGeneral) Set(val *DryRunGeneral) {
	v.value = val
	v.isSet = true
}

func (v NullableDryRunGeneral) IsSet() bool {
	return v.isSet
}

func (v *NullableDryRunGeneral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDryRunGeneral(val *DryRunGeneral) *NullableDryRunGeneral {
	return &NullableDryRunGeneral{value: val, isSet: true}
}

func (v NullableDryRunGeneral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDryRunGeneral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
