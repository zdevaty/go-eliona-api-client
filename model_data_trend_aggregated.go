/*
Eliona REST API

The Eliona REST PI enables unified access to the resources and data of an Eliona environment.

API version: 2.9.1
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DataTrendAggregated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTrendAggregated{}

// DataTrendAggregated Aggregated data with multiple data points for a periodical raster
type DataTrendAggregated struct {
	// ID of the corresponding asset
	AssetId int32        `json:"assetId"`
	Subtype *DataSubtype `json:"subtype,omitempty"`
	// Name of the attribute which holds the data points
	Attribute *string `json:"attribute,omitempty"`
	// Timestamp of this aggregated data set. The timestamp when the timeslot based on raster starts.
	Timestamp NullableTime `json:"timestamp,omitempty"`
	// Count of data points in this aggregated data set
	Count NullableFloat64 `json:"count,omitempty"`
	// Average of all data points for this aggregated data set
	Average NullableFloat64 `json:"average,omitempty"`
	// Sum of all data points for this aggregated data set
	Sum NullableFloat64 `json:"sum,omitempty"`
	// First data point in this aggregated data set
	First NullableFloat64 `json:"first,omitempty"`
	// Data point with the most minimal value in this aggregated data set
	Min NullableFloat64 `json:"min,omitempty"`
	// Data point with the most maximal value in this aggregated data set
	Max NullableFloat64 `json:"max,omitempty"`
	// Latest data point in this aggregated data set
	Last NullableFloat64 `json:"last,omitempty"`
}

type _DataTrendAggregated DataTrendAggregated

// NewDataTrendAggregated instantiates a new DataTrendAggregated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTrendAggregated(assetId int32) *DataTrendAggregated {
	this := DataTrendAggregated{}
	this.AssetId = assetId
	var subtype DataSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// NewDataTrendAggregatedWithDefaults instantiates a new DataTrendAggregated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTrendAggregatedWithDefaults() *DataTrendAggregated {
	this := DataTrendAggregated{}
	var subtype DataSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// GetAssetId returns the AssetId field value
func (o *DataTrendAggregated) GetAssetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *DataTrendAggregated) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *DataTrendAggregated) SetAssetId(v int32) {
	o.AssetId = v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *DataTrendAggregated) GetSubtype() DataSubtype {
	if o == nil || IsNil(o.Subtype) {
		var ret DataSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTrendAggregated) GetSubtypeOk() (*DataSubtype, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given DataSubtype and assigns it to the Subtype field.
func (o *DataTrendAggregated) SetSubtype(v DataSubtype) {
	o.Subtype = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *DataTrendAggregated) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTrendAggregated) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *DataTrendAggregated) SetAttribute(v string) {
	o.Attribute = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *DataTrendAggregated) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}

// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *DataTrendAggregated) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *DataTrendAggregated) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetCount() float64 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret float64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetCountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableFloat64 and assigns it to the Count field.
func (o *DataTrendAggregated) SetCount(v float64) {
	o.Count.Set(&v)
}

// SetCountNil sets the value for Count to be an explicit nil
func (o *DataTrendAggregated) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *DataTrendAggregated) UnsetCount() {
	o.Count.Unset()
}

// GetAverage returns the Average field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetAverage() float64 {
	if o == nil || IsNil(o.Average.Get()) {
		var ret float64
		return ret
	}
	return *o.Average.Get()
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetAverageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Average.Get(), o.Average.IsSet()
}

// HasAverage returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasAverage() bool {
	if o != nil && o.Average.IsSet() {
		return true
	}

	return false
}

// SetAverage gets a reference to the given NullableFloat64 and assigns it to the Average field.
func (o *DataTrendAggregated) SetAverage(v float64) {
	o.Average.Set(&v)
}

// SetAverageNil sets the value for Average to be an explicit nil
func (o *DataTrendAggregated) SetAverageNil() {
	o.Average.Set(nil)
}

// UnsetAverage ensures that no value is present for Average, not even an explicit nil
func (o *DataTrendAggregated) UnsetAverage() {
	o.Average.Unset()
}

// GetSum returns the Sum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetSum() float64 {
	if o == nil || IsNil(o.Sum.Get()) {
		var ret float64
		return ret
	}
	return *o.Sum.Get()
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetSumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sum.Get(), o.Sum.IsSet()
}

// HasSum returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasSum() bool {
	if o != nil && o.Sum.IsSet() {
		return true
	}

	return false
}

// SetSum gets a reference to the given NullableFloat64 and assigns it to the Sum field.
func (o *DataTrendAggregated) SetSum(v float64) {
	o.Sum.Set(&v)
}

// SetSumNil sets the value for Sum to be an explicit nil
func (o *DataTrendAggregated) SetSumNil() {
	o.Sum.Set(nil)
}

// UnsetSum ensures that no value is present for Sum, not even an explicit nil
func (o *DataTrendAggregated) UnsetSum() {
	o.Sum.Unset()
}

// GetFirst returns the First field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetFirst() float64 {
	if o == nil || IsNil(o.First.Get()) {
		var ret float64
		return ret
	}
	return *o.First.Get()
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetFirstOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.First.Get(), o.First.IsSet()
}

// HasFirst returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasFirst() bool {
	if o != nil && o.First.IsSet() {
		return true
	}

	return false
}

// SetFirst gets a reference to the given NullableFloat64 and assigns it to the First field.
func (o *DataTrendAggregated) SetFirst(v float64) {
	o.First.Set(&v)
}

// SetFirstNil sets the value for First to be an explicit nil
func (o *DataTrendAggregated) SetFirstNil() {
	o.First.Set(nil)
}

// UnsetFirst ensures that no value is present for First, not even an explicit nil
func (o *DataTrendAggregated) UnsetFirst() {
	o.First.Unset()
}

// GetMin returns the Min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetMin() float64 {
	if o == nil || IsNil(o.Min.Get()) {
		var ret float64
		return ret
	}
	return *o.Min.Get()
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Min.Get(), o.Min.IsSet()
}

// HasMin returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasMin() bool {
	if o != nil && o.Min.IsSet() {
		return true
	}

	return false
}

// SetMin gets a reference to the given NullableFloat64 and assigns it to the Min field.
func (o *DataTrendAggregated) SetMin(v float64) {
	o.Min.Set(&v)
}

// SetMinNil sets the value for Min to be an explicit nil
func (o *DataTrendAggregated) SetMinNil() {
	o.Min.Set(nil)
}

// UnsetMin ensures that no value is present for Min, not even an explicit nil
func (o *DataTrendAggregated) UnsetMin() {
	o.Min.Unset()
}

// GetMax returns the Max field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetMax() float64 {
	if o == nil || IsNil(o.Max.Get()) {
		var ret float64
		return ret
	}
	return *o.Max.Get()
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Max.Get(), o.Max.IsSet()
}

// HasMax returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasMax() bool {
	if o != nil && o.Max.IsSet() {
		return true
	}

	return false
}

// SetMax gets a reference to the given NullableFloat64 and assigns it to the Max field.
func (o *DataTrendAggregated) SetMax(v float64) {
	o.Max.Set(&v)
}

// SetMaxNil sets the value for Max to be an explicit nil
func (o *DataTrendAggregated) SetMaxNil() {
	o.Max.Set(nil)
}

// UnsetMax ensures that no value is present for Max, not even an explicit nil
func (o *DataTrendAggregated) UnsetMax() {
	o.Max.Unset()
}

// GetLast returns the Last field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTrendAggregated) GetLast() float64 {
	if o == nil || IsNil(o.Last.Get()) {
		var ret float64
		return ret
	}
	return *o.Last.Get()
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTrendAggregated) GetLastOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Last.Get(), o.Last.IsSet()
}

// HasLast returns a boolean if a field has been set.
func (o *DataTrendAggregated) HasLast() bool {
	if o != nil && o.Last.IsSet() {
		return true
	}

	return false
}

// SetLast gets a reference to the given NullableFloat64 and assigns it to the Last field.
func (o *DataTrendAggregated) SetLast(v float64) {
	o.Last.Set(&v)
}

// SetLastNil sets the value for Last to be an explicit nil
func (o *DataTrendAggregated) SetLastNil() {
	o.Last.Set(nil)
}

// UnsetLast ensures that no value is present for Last, not even an explicit nil
func (o *DataTrendAggregated) UnsetLast() {
	o.Last.Unset()
}

func (o DataTrendAggregated) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTrendAggregated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assetId"] = o.AssetId
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Average.IsSet() {
		toSerialize["average"] = o.Average.Get()
	}
	if o.Sum.IsSet() {
		toSerialize["sum"] = o.Sum.Get()
	}
	if o.First.IsSet() {
		toSerialize["first"] = o.First.Get()
	}
	if o.Min.IsSet() {
		toSerialize["min"] = o.Min.Get()
	}
	if o.Max.IsSet() {
		toSerialize["max"] = o.Max.Get()
	}
	if o.Last.IsSet() {
		toSerialize["last"] = o.Last.Get()
	}
	return toSerialize, nil
}

func (o *DataTrendAggregated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTrendAggregated := _DataTrendAggregated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTrendAggregated)

	if err != nil {
		return err
	}

	*o = DataTrendAggregated(varDataTrendAggregated)

	return err
}

type NullableDataTrendAggregated struct {
	value *DataTrendAggregated
	isSet bool
}

func (v NullableDataTrendAggregated) Get() *DataTrendAggregated {
	return v.value
}

func (v *NullableDataTrendAggregated) Set(val *DataTrendAggregated) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTrendAggregated) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTrendAggregated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTrendAggregated(val *DataTrendAggregated) *NullableDataTrendAggregated {
	return &NullableDataTrendAggregated{value: val, isSet: true}
}

func (v NullableDataTrendAggregated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTrendAggregated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
